package main

import (
	"fmt"
	"strconv"
	"strings"
)


type Vehicle struct {
	Name string
	Plat string
	Type string
	Rute []string
}


type Violation struct {
	Name  string
	Tilang int
}


func PoilisiRaziaAku(date int, data []Vehicle) []Violation {
	var violations []Violation
	routes := map[string]bool{
		"Gajah Mada":       true,
		"Hayam Wuruk":      true,
		"Sisingamangaraja": true,
		"Panglima Polim":   true,
		"Fatmawati":        true,
		"Tomang Raya":      true,
	}

	
	for _, vehicle := range data {
		if vehicle.Type != "Mobil" {
			continue
		}
		
		
		platNumber := strings.Fields(vehicle.Plat)[1]
		lastDigit, _ := strconv.Atoi(string(platNumber[len(platNumber)-1]))

		
		isEvenDate := date%2 == 0
		isEvenPlat := lastDigit%2 == 0

	
		violationCount := 0
		if isEvenDate != isEvenPlat {
			for _, route := range vehicle.Rute {
				if _, exists := routes[route]; exists {
					violationCount++
				}
			}
		}

		
		if violationCount > 0 {
			violations = append(violations, Violation{Name: vehicle.Name, Tilang: violationCount})
		}
	}
	return violations
}

func main() {
	vehicles := []Vehicle{
		{
			Name: "Denver",
			Plat: "B 2791 KDS",
			Type: "Mobil",
			Rute: []string{"TB Simatupang", "Panglima Polim", "Depok", "Senen Raya"},
		},
		{
			Name: "Toni",
			Plat: "B 1212 JBB",
			Type: "Mobil",
			Rute: []string{"Pintu Besar Selatan", "Panglima Polim", "Depok", "Senen Raya", "Kemang"},
		},
		{
			Name: "Stark",
			Plat: "B 444 XSX",
			Type: "Motor",
			Rute: []string{"Pondok Indah", "Depok", "Senen Raya", "Kemang"},
		},
		{
			Name: "Anna",
			Plat: "B 678 DD",
			Type: "Mobil",
			Rute: []string{"Fatmawati", "Panglima Polim", "Depok", "Senen Raya", "Kemang", "Gajah Mada"},
		},
	}

	result := PoilisiRaziaAku(27, vehicles)
	fmt.Println(result) 
}
